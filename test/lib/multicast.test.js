// Generated by CoffeeScript 1.9.2
(function() {
  var assert, async, chan, mult, proc, receive, ref, send;

  assert = require('chai').assert;

  ref = require('prochan'), proc = ref.proc, chan = ref.chan, send = ref.send, receive = ref.receive, mult = ref.mult;

  async = proc.async;

  describe("Multicasting:", function() {
    it("channel to channels", async(function*() {
      var ch1, ch2, ch3, ch4, ch5, m, p1, p2, p3, p4, p5;
      ch1 = chan();
      m = mult(ch1);
      m.add(ch2 = chan());
      m.add(ch3 = chan());
      m.add(ch4 = chan());
      m.add(ch5 = chan());
      p1 = proc(function*() {
        var i, j;
        for (i = j = 1; j <= 10; i = ++j) {
          (yield send(ch1, i));
        }
        ch1.close();
        return 'foo';
      });
      p2 = proc(function*() {
        var results;
        results = [];
        while (!ch2.isDone()) {
          results.push((yield receive(ch2)));
        }
        return results;
      });
      p3 = proc(function*() {
        var results;
        results = [];
        while (!ch3.isDone()) {
          results.push((yield receive(ch3)));
        }
        return results;
      });
      p4 = proc(function*() {
        var results;
        results = [];
        while (!ch4.isDone()) {
          results.push((yield receive(ch4)));
        }
        return results;
      });
      p5 = proc(function*() {
        var results;
        results = [];
        while (!ch5.isDone()) {
          results.push((yield receive(ch5)));
        }
        return results;
      });
      assert.equal('foo', (yield receive(p1)));
      assert.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (yield receive(p2)));
      assert.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (yield receive(p3)));
      assert.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (yield receive(p4)));
      return assert.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (yield receive(p5)));
    }));
    it("process to channels", async(function*() {
      var ch2, ch3, m, p2, p3;
      m = mult(proc(function*() {
        var i, j;
        for (i = j = 1; j <= 10; i = ++j) {
          (yield send(i));
        }
        return 'foo';
      }));
      m.add(ch2 = chan());
      m.add(ch3 = chan());
      p2 = proc(function*() {
        var results, value;
        results = [];
        while (true) {
          value = (yield receive(ch2));
          if (ch2.isDone()) {
            break;
          } else {
            results.push(value);
          }
        }
        return results;
      });
      p3 = proc(function*() {
        var results;
        results = [];
        while (!ch3.isDone()) {
          results.push((yield receive(ch3)));
        }
        return results;
      });
      assert.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (yield receive(p2)));
      return assert.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10].concat('foo'), (yield receive(p3)));
    }));
    it("channel to processes", async(function*() {
      var ch1, m, p1, p2, p3, p4;
      ch1 = chan();
      m = mult(ch1);
      p1 = proc(function*() {
        var i, j;
        for (i = j = 1; j <= 10; i = ++j) {
          (yield send(ch1, i));
        }
        ch1.close();
        return 'foo';
      });
      m.add(p2 = proc(function*() {
        var results;
        results = [];
        while (!proc.isClosed()) {
          results.push((yield receive()));
        }
        return results;
      }));
      m.add(p3 = proc(function*() {
        var results;
        results = [];
        while (!proc.isClosed()) {
          results.push((yield receive()));
        }
        return results;
      }));
      m.add(p4 = proc(function*() {
        var results;
        results = [];
        while (!proc.isClosed()) {
          results.push((yield receive()));
        }
        return results;
      }));
      assert.equal('foo', (yield receive(p1)));
      assert.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (yield receive(p2)));
      assert.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (yield receive(p3)));
      return assert.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (yield receive(p4)));
    }));
    return it("process to processes", async(function*() {
      var m, p1, p2, p3, routine;
      m = mult(proc(function*() {
        var i, j;
        for (i = j = 1; j <= 10; i = ++j) {
          (yield send(i));
        }
        return 'foo';
      }));
      routine = function*() {
        var results, value;
        results = [];
        while (true) {
          value = (yield receive());
          if (proc.isClosed()) {
            break;
          } else {
            results.push(value);
          }
        }
        return results;
      };
      m.add(p1 = proc(routine));
      m.add(p2 = proc(routine));
      m.add(p3 = proc(routine));
      assert.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (yield receive(p1)));
      assert.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (yield receive(p2)));
      return assert.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (yield receive(p3)));
    }));
  });

}).call(this);
