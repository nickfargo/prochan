// Generated by CoffeeScript 1.9.3
(function() {
  var assert, async, chan, expect, final, proc, receive, ref, ref1, send, sleep;

  ref = require('chai'), assert = ref.assert, expect = ref.expect;

  ref1 = require('prochan'), proc = ref1.proc, chan = ref1.chan, send = ref1.send, receive = ref1.receive, final = ref1.final, sleep = ref1.sleep;

  async = proc.async;

  describe("Demos:", function() {
    it("does go ping-pong", async(function*() {
      var Ball, ball, player, table;
      table = chan();
      Ball = function() {
        return this.hits = 0;
      };
      player = function*(name, table) {
        var ball, results;
        results = [];
        while (true) {
          ball = (yield receive(table));
          ball.hits++;
          (yield sleep(1));
          results.push((yield send(table, ball)));
        }
        return results;
      };
      proc(player('Ping ->', table));
      proc(player('<- Pong', table));
      (yield send(table, ball = new Ball));
      (yield sleep(20));
      return assert.equal(ball, (yield receive(table)));
    }));
    return it("detects `done` without racing or sentinels", async(function*() {
      var c, consumers, i, j, len, producer, results, sanity;
      sanity = 10;
      producer = proc(function*() {
        var i, j;
        for (i = j = 1; j <= 10; i = ++j) {
          (yield send(i));
        }
        return 'foo';
      });
      consumers = (function() {
        var j, results;
        results = [];
        for (i = j = 1; j <= 3; i = ++j) {
          results.push(proc(function*() {
            var value;
            while (!final(value = (yield receive(producer)))) {
              if (sanity-- === 0) {
                throw new Error("Insanity");
              }
            }
            return value;
          }));
        }
        return results;
      })();
      results = [];
      for (j = 0, len = consumers.length; j < len; j++) {
        c = consumers[j];
        results.push(assert.equal('foo', (yield receive(c))));
      }
      return results;
    }));
  });

}).call(this);
