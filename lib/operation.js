// Generated by CoffeeScript 1.9.2
(function() {
  var Awaiter, Operation, pooled,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Awaiter = require('./awaiter');

  pooled = require('./helpers').pooled;

  module.exports = Operation = (function(superClass) {
    extend(Operation, superClass);

    function Operation(selector, consequent, channel, value) {
      Operation.__super__.constructor.apply(this, arguments);
      this.selector = selector;
      this.consequent = consequent;
      this.channel = channel;
      this.value = value;
    }

    Operation.prototype.proceed = function(value, isFinal) {
      return this.selector.proceedWith(this, value, isFinal);
    };

    Operation.prototype.free = function() {
      return this.channel.cancel(this);
    };

    pooled(Operation.Receive = (function(superClass1) {
      extend(Receive, superClass1);

      function Receive() {
        return Receive.__super__.constructor.apply(this, arguments);
      }

      Receive.prototype.type = 'receive';

      Receive.prototype.isReady = function() {
        return this.channel.canProcessReceive();
      };

      Receive.prototype.detain = function() {
        return this.channel.detain(this);
      };

      return Receive;

    })(Operation));

    pooled(Operation.Send = (function(superClass1) {
      extend(Send, superClass1);

      function Send() {
        return Send.__super__.constructor.apply(this, arguments);
      }

      Send.prototype.type = 'send';

      Send.prototype.isReady = function() {
        return this.channel.canProcessSend();
      };

      Send.prototype.detain = function() {
        return this.channel.detain(this, this.value);
      };

      return Send;

    })(Operation));

    return Operation;

  })(Awaiter);

}).call(this);
