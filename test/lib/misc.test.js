// Generated by CoffeeScript 1.10.0
(function() {
  var assert, async, chan, final, inspect, proc, receive, ref, select, send, sleep;

  inspect = require('util').inspect;

  assert = require('chai').assert;

  ref = require('prochan'), proc = ref.proc, chan = ref.chan, receive = ref.receive, send = ref.send, final = ref.final, select = ref.select, sleep = ref.sleep;

  async = proc.async;

  describe("Misc:", function() {
    describe("chan.from", function() {
      it("correctly loads small arrays", function() {
        var ch;
        ch = chan.from([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
        return assert.equal(ch.buffer.queue.length, 10);
      });
      return it("correctly loads multi-cell size arrays", function() {
        var ch, i, q, results;
        ch = chan.from((function() {
          results = [];
          for (i = 1; i <= 72; i++){ results.push(i); }
          return results;
        }).apply(this));
        q = ch.buffer.queue;
        assert(q != null);
        assert.equal(q.head._next._next, q.tail);
        assert.equal(q.tail._prev._prev, q.head);
        return assert.equal(q.tail.array.length, 8);
      });
    });
    return describe("Laziness:", function() {
      return it("allows eager-to-lazy communication", async(function*() {
        var channel, gobble, nibble, ref1, value;
        nibble = proc(function*() {
          var results, source, value;
          source = chan.from([1, 2, 3]).close();
          results = [];
          while (!final(value = (yield source))) {
            (yield null);
            results.push(value);
          }
          return results;
        });
        gobble = proc(function*() {
          var results, source, value;
          source = chan.from([1, 2, 3, 4, 5, 6, 7, 8, 9]).close();
          results = [];
          while (!final(value = (yield source))) {
            results.push(value);
          }
          return results;
        });
        ref1 = (yield select(nibble, gobble)), value = ref1.value, channel = ref1.channel;
        return assert.equal(channel, gobble);
      }));
    });
  });

}).call(this);
