// Generated by CoffeeScript 1.10.0
(function() {
  var assert, async, chan, final, merge, proc, receive, ref, send;

  assert = require('chai').assert;

  ref = require('prochan'), proc = ref.proc, chan = ref.chan, send = ref.send, receive = ref.receive, final = ref.final, merge = ref.merge;

  async = proc.async;

  describe("Merge:", function() {
    return it("merges values into single output channel", async(function*() {
      var ch, inputs, merged, mergedResult, resultValues, values;
      inputs = [
        proc(function*() {
          (yield send(1));
          (yield send(2));
          (yield send(3));
          (yield send(4));
          (yield send(5));
          return 'foo';
        }), proc(function*() {
          (yield send(6));
          (yield send(7));
          (yield send(8));
          return 'bar';
        }), proc(function*() {
          (yield send(9));
          return 'baz';
        })
      ];
      merged = merge(inputs);
      values = (yield receive(proc(function*() {
        var results, value;
        results = [];
        while (!final(value = (yield receive(merged)))) {
          results.push(value);
        }
        return results;
      })));
      assert.sameMembers(values, [1, 2, 3, 4, 5, 6, 7, 8, 9]);
      assert.notDeepEqual(values, [1, 2, 3, 4, 5, 6, 7, 8, 9]);
      mergedResult = (yield receive(merged));
      assert.sameMembers(inputs, mergedResult);
      assert.notDeepEqual(inputs, mergedResult);
      resultValues = (yield* (function*() {
        var i, len, results;
        results = [];
        for (i = 0, len = mergedResult.length; i < len; i++) {
          ch = mergedResult[i];
          results.push((yield receive(ch)));
        }
        return results;
      })());
      assert.sameMembers(resultValues, ['foo', 'bar', 'baz']);
      return assert.notDeepEqual(resultValues, ['foo', 'bar', 'baz']);
    }));
  });

}).call(this);
