// Generated by CoffeeScript 1.10.0
(function() {
  var Generator, Merger, chan, final, proc, receive, ref, send,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('./'), proc = ref.proc, chan = ref.chan, receive = ref.receive, send = ref.send, final = ref.final;

  Generator = require('./helpers').Generator;

  module.exports = Merger = (function() {
    var MergeGenerator;

    function Merger(channels, into) {
      var ch, i, len;
      this.width = channels.length;
      this.output = into != null ? into : chan();
      this.results = [];
      for (i = 0, len = channels.length; i < len; i++) {
        ch = channels[i];
        proc(new MergeGenerator(this, ch));
      }
    }

    MergeGenerator = (function(superClass) {
      extend(MergeGenerator, superClass);

      function MergeGenerator(merger, channel) {
        this.merger = merger;
        this.channel = channel;
        MergeGenerator.__super__.constructor.apply(this, arguments);
      }

      MergeGenerator.prototype.next = function(value) {
        switch (++this._step) {
          case 1:
            return this["yield"](receive(this.channel));
          case 2:
            if (final()) {
              this.merger.results.push(this.channel);
              if (--this.merger.width === 0) {
                this.merger.output.close(this.merger.results);
              }
              return this["return"]();
            } else {
              this._step = 0;
              return this["yield"](send(this.merger.output, value));
            }
        }
      };

      return MergeGenerator;

    })(Generator);

    return Merger;

  })();

}).call(this);
