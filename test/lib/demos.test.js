// Generated by CoffeeScript 1.10.0
(function() {
  var assert, async, chan, final, proc, ref, select, send, sleep;

  assert = require('chai').assert;

  ref = require('prochan'), proc = ref.proc, chan = ref.chan, send = ref.send, final = ref.final, select = ref.select, sleep = ref.sleep;

  async = proc.async;

  describe("Demos:", function() {
    it("does go ping-pong", async(function*() {
      var Ball, ball, player, table;
      table = chan();
      Ball = function() {
        return this.hits = 0;
      };
      player = function*(name, table) {
        var ball, results;
        results = [];
        while (true) {
          ball = (yield table);
          ball.hits++;
          (yield sleep(1));
          results.push((yield send(table, ball)));
        }
        return results;
      };
      proc(player('Ping ->', table));
      proc(player('<- Pong', table));
      (yield send(table, ball = new Ball));
      (yield sleep(20));
      return assert.equal(ball, (yield table));
    }));
    it("sieves the primes", async(function*() {
      var filtering, j, len, n, numbers, primes, ref1, sieve;
      numbers = function*(start) {
        var n;
        n = start;
        while (true) {
          (yield send(n++));
        }
      };
      filtering = function*(input, prime) {
        var n;
        while (true) {
          n = (yield input);
          if (n % prime) {
            (yield send(n));
          }
        }
      };
      sieve = function*() {
        var prime, source;
        source = proc(numbers(2));
        while (true) {
          (yield send(prime = (yield source)));
          source = proc(filtering(source, prime));
        }
      };
      primes = proc(sieve);
      ref1 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47];
      for (j = 0, len = ref1.length; j < len; j++) {
        n = ref1[j];
        assert.equal(n, (yield primes));
      }
    }));
    return it("detects `done` without racing or sentinels", async(function*() {
      var c, consumers, i, j, len, producer, sanity;
      sanity = 10;
      producer = proc(function*() {
        var i, j;
        for (i = j = 1; j <= 10; i = ++j) {
          (yield send(i));
        }
        return 'foo';
      });
      consumers = (function() {
        var j, results;
        results = [];
        for (i = j = 1; j <= 3; i = ++j) {
          results.push(proc(function*() {
            var value;
            while (!final(value = (yield producer))) {
              if (sanity-- === 0) {
                throw new Error("Huge mistake");
              }
            }
            return value;
          }));
        }
        return results;
      })();
      for (j = 0, len = consumers.length; j < len; j++) {
        c = consumers[j];
        assert.equal('foo', (yield c));
      }
    }));
  });

}).call(this);
