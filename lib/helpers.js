// Generated by CoffeeScript 1.9.2
(function() {
  var slice = [].slice;

  module.exports = (function() {
    var Generator, has, ref;
    has = Object.prototype.hasOwnProperty;
    return {
      isArray: (ref = Array.isArray) != null ? ref : function(a) {
        return (a != null) && typeof a === 'object' && typeof a.splice === 'function' && typeof a.length === number;
      },
      alias: function() {
        var i, j, len, len1, map, o, objects, ref1, s, t;
        map = arguments[0], objects = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        for (i = 0, len = objects.length; i < len; i++) {
          o = objects[i];
          for (s in map) {
            t = map[s];
            if (has.call(o, s)) {
              ref1 = t.split(/\s+/);
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                t = ref1[j];
                if (!has.call(o, t)) {
                  o[t] = o[s];
                }
              }
            }
          }
        }
      },
      pooled: function(constructor) {
        constructor.POOL_SIZE = 4096;
        constructor.pool = [];
        constructor.alloc = function() {
          var instance;
          if (!has.call(this, 'pool')) {
            this.pool = [];
          }
          instance = this.pool.pop() || new this;
          this.apply(instance, arguments);
          return instance;
        };
        constructor.prototype.free = (function() {
          var free, ref1, ref2, super__;
          free = function() {
            var c;
            c = this.constructor;
            c.apply(this, arguments);
            if (c.pool.length < c.POOL_SIZE) {
              return c.pool.push(this);
            }
          };
          super__ = (ref1 = (ref2 = constructor.__super__) != null ? ref2 : typeof constructor.prototype === "function" ? constructor.prototype(constructor.prototype) : void 0) != null ? ref1.free : void 0;
          if (super__ != null) {
            return function() {
              super__.apply(this, arguments);
              return free.apply(this, arguments);
            };
          } else {
            return free;
          }
        })();
        return constructor;
      },
      attenuate: function(methodNames) {
        var Attenuator, i, includes, len, name;
        if (typeof methodNames === 'string') {
          methodNames = methodNames.split(/\s+/);
        }
        includes = {};
        for (i = 0, len = methodNames.length; i < len; i++) {
          name = methodNames[i];
          includes[name] = true;
        }
        return Attenuator = (function() {
          var fn, j, len1;

          function Attenuator(client) {
            this['@@attenuator'] = function(name, args) {
              var result;
              if (includes[name] == null) {
                throw new TypeError;
              }
              result = client[name].apply(client, args);
              if (result === client) {
                return this;
              } else {
                return result;
              }
            };
          }

          fn = function(name) {
            return Attenuator.prototype[name] = function() {
              return this['@@attenuator'](name, arguments);
            };
          };
          for (j = 0, len1 = methodNames.length; j < len1; j++) {
            name = methodNames[j];
            fn(name);
          }

          return Attenuator;

        })();
      },
      Generator: Generator = (function() {
        function Generator() {
          this._result = {
            value: void 0,
            done: false
          };
          this._step = 0;
        }

        Generator.prototype.next = function() {};

        Generator.prototype["yield"] = function(value) {
          this._result.value = value;
          return this._result;
        };

        Generator.prototype["return"] = function(value) {
          this._result.done = true;
          return this["yield"](value);
        };

        Generator.prototype["throw"] = function(error) {
          throw error;
        };

        return Generator;

      })()
    };
  })();

}).call(this);
